// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace WebSiteTest.Areas.ProductsManager.Models
{
    public partial class ComperWebSiteContext : DbContext
    {
        public ComperWebSiteContext()
        {
        }

        public ComperWebSiteContext(DbContextOptions<ComperWebSiteContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Customers> Customers { get; set; }
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<OrderDetail> OrderDetail { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<Purchase> Purchase { get; set; }
        public virtual DbSet<PurchaseDetail> PurchaseDetail { get; set; }
        public virtual DbSet<Suppliers> Suppliers { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Customers>(entity =>
            {
                entity.HasKey(e => e.CustomerId);

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(50)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.CAccount)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("C_Account");

                entity.Property(e => e.CAddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("C_AddDate");

                entity.Property(e => e.CAddress)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("C_Address");

                entity.Property(e => e.CBirth)
                    .HasColumnType("datetime")
                    .HasColumnName("C_Birth");

                entity.Property(e => e.CEmail)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("C_Email");

                entity.Property(e => e.CNotes).HasColumnName("C_Notes");

                entity.Property(e => e.CPassWord)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("C_PassWord");

                entity.Property(e => e.CPhone)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("C_Phone");

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Employees>(entity =>
            {
                entity.HasKey(e => e.EmployeeId);

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(50)
                    .HasColumnName("EmployeeID");

                entity.Property(e => e.EmployeeAddress)
                    .HasMaxLength(100)
                    .HasColumnName("Employee_Address");

                entity.Property(e => e.EmployeeBirth)
                    .HasColumnType("datetime")
                    .HasColumnName("Employee_Birth");

                entity.Property(e => e.EmployeeEmail)
                    .HasMaxLength(50)
                    .HasColumnName("Employee_Email");

                entity.Property(e => e.EmployeeHireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Employee_HireDate");

                entity.Property(e => e.EmployeeName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.EmployeeNotes)
                    .HasMaxLength(100)
                    .HasColumnName("Employee_Notes");

                entity.Property(e => e.EmployeePassWord)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Employee_PassWord");

                entity.Property(e => e.EmployeePhone)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Employee_Phone");
            });

            modelBuilder.Entity<OrderDetail>(entity =>
            {
                entity.HasKey(e => e.OrderId);

                entity.Property(e => e.OrderId)
                    .HasMaxLength(50)
                    .HasColumnName("OrderID");

                entity.Property(e => e.ProductId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ProductID");

                entity.HasOne(d => d.Order)
                    .WithOne(p => p.OrderDetail)
                    .HasForeignKey<OrderDetail>(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetail_Orders1");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.OrderDetail)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetail_Orders");
            });

            modelBuilder.Entity<Orders>(entity =>
            {
                entity.HasKey(e => e.OrderId);

                entity.Property(e => e.OrderId)
                    .HasMaxLength(50)
                    .HasColumnName("OrderID");

                entity.Property(e => e.CustomerId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.EmployeeId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("EmployeeID");

                entity.Property(e => e.OrderOnDate).HasColumnType("datetime");

                entity.Property(e => e.OrderStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShipAddress).IsRequired();

                entity.Property(e => e.ShipDate).HasColumnType("datetime");

                entity.Property(e => e.ShippingMethod)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Products>(entity =>
            {
                entity.HasKey(e => e.ProductId);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(50)
                    .HasColumnName("ProductID");

                entity.Property(e => e.ProductCategory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductOffDate).HasColumnType("datetime");

                entity.Property(e => e.ProductOnDate).HasColumnType("datetime");

                entity.Property(e => e.ProductStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductSupplierId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ProductSupplierID");
            });

            modelBuilder.Entity<Purchase>(entity =>
            {
                entity.Property(e => e.PurchaseId)
                    .HasMaxLength(50)
                    .HasColumnName("PurchaseID");

                entity.Property(e => e.EmployeeId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("EmployeeID");

                entity.Property(e => e.PurchaseDate).HasColumnType("date");

                entity.Property(e => e.SupplierId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("SupplierID");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.Purchase)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Purchase_Employees");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.Purchase)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Purchase_Suppliers");
            });

            modelBuilder.Entity<PurchaseDetail>(entity =>
            {
                entity.HasKey(e => e.PurchaseId);

                entity.Property(e => e.PurchaseId)
                    .HasMaxLength(50)
                    .HasColumnName("PurchaseID");

                entity.Property(e => e.ProductId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ProductID");

                entity.Property(e => e.ProductQty)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductUnitPrice)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Purchase)
                    .WithOne(p => p.PurchaseDetail)
                    .HasForeignKey<PurchaseDetail>(d => d.PurchaseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseDetail_Purchase");
            });

            modelBuilder.Entity<Suppliers>(entity =>
            {
                entity.HasKey(e => e.SupplierId);

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(50)
                    .HasColumnName("SupplierID");

                entity.Property(e => e.Address).HasMaxLength(50);

                entity.Property(e => e.CompanyName).HasMaxLength(50);

                entity.Property(e => e.ContactPerson).HasMaxLength(50);

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}