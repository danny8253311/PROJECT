// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace WebSiteTest.Areas.GpuComparison.Models
{
    public partial class ComperWebSiteContext : DbContext
    {
        public ComperWebSiteContext()
        {
        }

        public ComperWebSiteContext(DbContextOptions<ComperWebSiteContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ComputerModel> ComputerModel { get; set; }
        public virtual DbSet<Customers> Customers { get; set; }
        public virtual DbSet<GpuComparisonSystem> GpuComparisonSystem { get; set; }
        public virtual DbSet<OrderDetail> OrderDetail { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<Products> Products { get; set; }

//        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//        {
//            if (!optionsBuilder.IsConfigured)
//            {
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
//                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=ComperWebSite;Integrated Security=True");
//            }
//        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ComputerModel>(entity =>
            {
                entity.HasKey(e => e.ProductsId);

                entity.Property(e => e.ProductsId)
                    .HasMaxLength(100)
                    .HasColumnName("ProductsID");

                entity.Property(e => e.Value).HasMaxLength(100);
            });

            modelBuilder.Entity<Customers>(entity =>
            {
                entity.HasKey(e => e.CustomerId);

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(50)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.CAccount)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("C_Account");

                entity.Property(e => e.CAddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("C_AddDate");

                entity.Property(e => e.CAddress)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("C_Address");

                entity.Property(e => e.CBirth)
                    .HasColumnType("datetime")
                    .HasColumnName("C_Birth");

                entity.Property(e => e.CEmail)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("C_Email");

                entity.Property(e => e.CNotes).HasColumnName("C_Notes");

                entity.Property(e => e.CPassWord)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("C_PassWord");

                entity.Property(e => e.CPhone)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("C_Phone");

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<GpuComparisonSystem>(entity =>
            {
                entity.HasKey(e => e.ProductsId);

                entity.Property(e => e.ProductsId)
                    .HasMaxLength(50)
                    .HasColumnName("ProductsID");

                entity.Property(e => e.BaseMark)
                    .HasMaxLength(100)
                    .HasColumnName("BASE_mark");

                entity.Property(e => e.FfxivMark)
                    .HasMaxLength(100)
                    .HasColumnName("FFXIV_mark");

                entity.Property(e => e.FhdMark)
                    .HasMaxLength(100)
                    .HasColumnName("FHD_mark");

                entity.Property(e => e.Img)
                    .HasMaxLength(100)
                    .HasColumnName("img");

                entity.Property(e => e.Price).HasMaxLength(100);

                entity.Property(e => e.RunningDate)
                    .HasColumnType("date")
                    .HasColumnName("Running_date");

                entity.Property(e => e.Temperature).HasMaxLength(100);

                entity.Property(e => e._4kMark)
                    .HasMaxLength(100)
                    .HasColumnName("_4K_mark");
            });

            modelBuilder.Entity<OrderDetail>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.ProductId });

                entity.Property(e => e.OrderId)
                    .HasMaxLength(50)
                    .HasColumnName("OrderID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(50)
                    .HasColumnName("ProductID");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderDetail)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetail_Orders1");
            });

            modelBuilder.Entity<Orders>(entity =>
            {
                entity.HasKey(e => e.OrderId);

                entity.Property(e => e.OrderId)
                    .HasMaxLength(50)
                    .HasColumnName("OrderID");

                entity.Property(e => e.AcceptEmail)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AcceptName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AcceptNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.EmployeeId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("EmployeeID");

                entity.Property(e => e.OrderOnDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OrderStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShipAddress).IsRequired();

                entity.Property(e => e.ShipDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ShippingMethod)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Products>(entity =>
            {
                entity.HasKey(e => e.ProductId);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(50)
                    .HasColumnName("ProductID");

                entity.Property(e => e.ProductCategory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductOffDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ProductOnDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ProductPic).HasMaxLength(50);

                entity.Property(e => e.ProductStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'上架')");

                entity.Property(e => e.ProductSupplierId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ProductSupplierID");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}